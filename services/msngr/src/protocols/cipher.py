sbox = (
    0x2a, 0x00, 0x7e, 0x54, 0x82, 0xa8, 0xd6, 0xfc, 0x61, 0x4b, 0x35, 0x1f, 0xc9, 0xe3, 0x9d, 0xb7,
    0xbc, 0x96, 0xe8, 0xc2, 0x14, 0x3e, 0x40, 0x6a, 0xf7, 0xdd, 0xa3, 0x89, 0x5f, 0x75, 0x0b, 0x21,
    0x1d, 0x37, 0x49, 0x63, 0xb5, 0x9f, 0xe1, 0xcb, 0x56, 0x7c, 0x02, 0x28, 0xfe, 0xd4, 0xaa, 0x80,
    0x8b, 0xa1, 0xdf, 0xf5, 0x23, 0x09, 0x77, 0x5d, 0xc0, 0xea, 0x94, 0xbe, 0x68, 0x42, 0x3c, 0x16,
    0x44, 0x6e, 0x10, 0x3a, 0xec, 0xc6, 0xb8, 0x92, 0x0f, 0x25, 0x5b, 0x71, 0xa7, 0x8d, 0xf3, 0xd9, 
    0xd2, 0xf8, 0x86, 0xac, 0x7a, 0x50, 0x2e, 0x04, 0x99, 0xb3, 0xcd, 0xe7, 0x31, 0x1b, 0x65, 0x4f,
    0x73, 0x59, 0x27, 0x0d, 0xdb, 0xf1, 0x8f, 0xa5, 0x38, 0x12, 0x6c, 0x46, 0x90, 0xba, 0xc4, 0xee,
    0xe5, 0xcf, 0xb1, 0x9b, 0x4d, 0x67, 0x19, 0x33, 0xae, 0x84, 0xfa, 0xd0, 0x06, 0x2c, 0x52, 0x78,
    0xf6, 0xdc, 0xa2, 0x88, 0x5e, 0x74, 0x0a, 0x20, 0xbd, 0x97, 0xe9, 0xc3, 0x15, 0x3f, 0x41, 0x6b,
    0x60, 0x4a, 0x34, 0x1e, 0xc8, 0xe2, 0x9c, 0xb6, 0x2b, 0x01, 0x7f, 0x55, 0x83, 0xa9, 0xd7, 0xfd,
    0xc1, 0xeb, 0x95, 0xbf, 0x69, 0x43, 0x3d, 0x17, 0x8a, 0xa0, 0xde, 0xf4, 0x22, 0x08, 0x76, 0x5c,
    0x57, 0x7d, 0x03, 0x29, 0xff, 0xd5, 0xab, 0x81, 0x1c, 0x36, 0x48, 0x62, 0xb4, 0x9e, 0xe0, 0xca,
    0x98, 0xb2, 0xcc, 0xe6, 0x30, 0x1a, 0x64, 0x4e, 0xd3, 0xf9, 0x87, 0xad, 0x7b, 0x51, 0x2f, 0x05,
    0x0e, 0x24, 0x5a, 0x70, 0xa6, 0x8c, 0xf2, 0xd8, 0x45, 0x6f, 0x11, 0x3b, 0xed, 0xc7, 0xb9, 0x93, 
    0xaf, 0x85, 0xfb, 0xd1, 0x07, 0x2d, 0x53, 0x79, 0xe4, 0xce, 0xb0, 0x9a, 0x4c, 0x66, 0x18, 0x32, 
    0x39, 0x13, 0x6d, 0x47, 0x91, 0xbb, 0xc5, 0xef, 0x72, 0x58, 0x26, 0x0c, 0xda, 0xf0, 0x8e, 0xa4
)

sbox_inverse = (1, 153, 42, 178, 87, 207, 124, 228, 173, 53, 134, 30, 251, 99, 208, 72, 66, 218, 105, 241, 20, 140, 63, 167, 238, 118, 197, 93, 184, 32, 147, 11, 135, 31, 172, 52, 209, 73, 250, 98, 43, 179, 0, 152, 125, 229, 86, 206, 196, 92, 239, 119, 146, 10, 185, 33, 104, 240, 67, 219, 62, 166, 21, 141, 22, 142, 61, 165, 64, 216, 107, 243, 186, 34, 145, 9, 236, 116, 199, 95, 85, 205, 126, 230, 3, 155, 40, 176, 249, 97, 210, 74, 175, 55, 132, 28, 144, 8, 187, 35, 198, 94, 237, 117, 60, 164, 23, 143, 106, 242, 65, 217, 211, 75, 248, 96, 133, 29, 174, 54, 127, 231, 84, 204, 41, 177, 2, 154, 47, 183, 4, 156, 121, 225, 82, 202, 131, 27, 168, 48, 213, 77, 254, 102, 108, 244, 71, 223, 58, 162, 17, 137, 192, 88, 235, 115, 150, 14, 189, 37, 169, 49, 130, 26, 255, 103, 212, 76, 5, 157, 46, 182, 83, 203, 120, 224, 234, 114, 193, 89, 188, 36, 151, 15, 70, 222, 109, 245, 16, 136, 59, 163, 56, 160, 19, 139, 110, 246, 69, 221, 148, 12, 191, 39, 194, 90, 233, 113, 123, 227, 80, 200, 45, 181, 6, 158, 215, 79, 252, 100, 129, 25, 170, 50, 190, 38, 149, 13, 232, 112, 195, 91, 18, 138, 57, 161, 68, 220, 111, 247, 253, 101, 214, 78, 171, 51, 128, 24, 81, 201, 122, 226, 7, 159, 44, 180)

# permute has the following properties:
# permute(permute(x)) = x
# permute(a) ^ permute(b) = permute(a ^ b)
def permute(block):
    result = [0 for _ in range(8)]
    for i in range(8):
        x = block[i]
        for j in range(8):
            result[j] |= (x & 1) << i
            x >>= 1
    return result


def substitute(block):
    return [sbox[x] for x in block]


def inv_substitute(block):
    return [sbox_inverse[x] for x in block]


def pad(msg, length):
    return msg + bytes([0] * (length - (len(msg) % length)))


def unpad(msg):
    while len(msg) > 0 and msg[-1] == 0:
         msg = msg[:-1]
    return msg


def xor(a,b):
    return bytes([i ^ j for i,j in zip(a,b)])


class Cipher:
    def __init__(self,key):
        self.__init_round_keys(pad(key, 64))

    def __init_round_keys(self,key):
        keys = [key[i:i+8] for i in range(0, 64, 8)]
        self.round_keys = keys.copy()
        for key in keys:
             self.round_keys.append(key[::-1])

    def __encrypt_block(self,block):
        for key in self.round_keys:
            block = permute(block)
            block = xor(block, key)
            block = substitute(block)
        return bytes(block)

    def __decrypt_block(self, block):
        for key in self.round_keys[::-1]:
            block = inv_substitute(block)
            block = xor(block, key)
            block = permute(block)
        return bytes(block)
    
    def encrypt(self, msg):
        encrypted = b''
        msg = pad(msg,8)
        for i in range(0, len(msg), 8):
            block = msg[i:i+8]
            encrypted += self.__encrypt_block(block)
        return encrypted

    def decrypt(self, encrypted):
        msg = b''
        for i in range(0, len(encrypted), 8):
            block = encrypted[i:i+8]
            msg += self.__decrypt_block(block)
        return unpad(msg)
